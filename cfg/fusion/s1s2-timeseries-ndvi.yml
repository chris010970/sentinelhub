request:
    evalscript: |
                //VERSION=3
                function setup() {
                    return {
                        input: [{
                            datasource: "s1",
                            bands: ["VV", "VH"]
                        },
                        {
                            datasource: "s2_l2a",
                            bands: ["B02", "B03", "B08", "B04", "SCL"]
                        } ],
                        output: [
                            { id: "TrueColor", bands: 3 },
                            { id: "VV", bands: 1 },
                            { id: "NDVI", bands: 3 },
                            { id: "SCL", bands: 1, sampleType: SampleType.UINT16 } ]
                    }
                }
                function toDb(linear) {
                // Convert the linear backscatter to DB (Filgueiras et al. (2019), eq. 3)
                    return 10 * Math.LN10 * linear
                }
                function calc_s1_ndvi(sigmaVV, sigmaVH) {
                    // Convert sigma0 to Decibels
                    let vh_Db = toDb(sigmaVH)
                    let vv_Db = toDb(sigmaVV)
                    // Calculate NRPB (Filgueiras et al. (2019), eq. 4)
                    let NRPB = (vh_Db - vv_Db) / (vh_Db + vv_Db)
                    // Calculate NDVI_nc with approach A3 (Filgueiras et al. (2019), eq. 14)
                    let NDVInc = 2.572 - 0.05047 * vh_Db + 0.176 * vv_Db + 3.422 * NRPB
                    return NDVInc
                }
                function evaluateNdvi(s1, s2) {
                    // Create an NDVI visualiser
                    var viz = new ColorMapVisualizer([
                        [0.0, 0xa50026],
                        [0.0, 0xd73027],
                        [0.2, 0xf46d43],
                        [0.3, 0xfdae61],
                        [0.4, 0xfee08b],
                        [0.5, 0xffffbf],
                        [0.6, 0xd9ef8b],
                        [0.7, 0xa6d96a],
                        [0.8, 0x66bd63],
                        [0.9, 0x1a9850],
                        [1.0, 0x006837]
                    ])
                    // Calculate S2 NDVI
                    let ndvi = index(s2.B08, s2.B04)
                    // Calculate S1 NDVI
                    let s1_ndvi = calc_s1_ndvi(s1.VV, s1.VH)
                    // Use the S2-L2A classification to identify clouds
                    if ([7, 8, 9, 10].includes(s2.SCL)) {
                        // If clouds are present use S1 NDVI
                        return viz.process(s1_ndvi)
                    } else {
                        // Otherwise use s2 NDVI
                        return viz.process(ndvi)
                    }
                }
                function evaluatePixel(samples) {
                    var s1 = samples.s1[0]
                    var s2 = samples.s2_l2a[0]
                    var truecolor = [ s2.B04, s2.B03, s2.B02 ]
                    var vv = [ s1.VV ]
                    var scl = [ s2.SCL ]
                    var ndvi = evaluateNdvi(s1, s2)
                    return {
                        TrueColor: truecolor, 
                        VV: vv,
                        NDVI: ndvi,
                        SCL: scl
                    }
                }
    inputs:
        - collection: SENTINEL2_L2A
          id: s2_l2a
        - collection: SENTINEL1
          id: s1
          lag: 168
          processing:
              orthorectify: yes
              backCoeff: GAMMA0_TERRAIN
responses:
    TrueColor: TIFF
    VV: TIFF
    NDVI: TIFF
    SCL: TIFF
aoi:
    pathname: <path-to-aoi-file>
    field: name
    distance: 500
